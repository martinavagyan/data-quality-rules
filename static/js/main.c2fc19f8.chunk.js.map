{"version":3,"sources":["components/RoleEditor/index.jsx","components/ToolBar/index.jsx","App.jsx","serviceWorker.js","index.js","assets/logo.png"],"names":["Button","styled","button","Wrapper","div","Editor","Output","getColumnBuilderProps","name","type","operators","label","fields","getControlElements","valueEditor","specs","field","operator","handleOnChange","value","operatorName","toLowerCase","startsWith","includes","onChange","RoleEditor","table","columns","useState","queries","setQuery","parentOf","setParentOf","completnessOperator","setCompletnessOperator","completnessValue","setCompletnessValue","useEffect","map","column","rule","state","columnMap","reduce","obj","getInputType","body","correctness_validations","completeness_validations","parent_children_constraints","length","key","onQueryChange","query","targetColumn","input","currentQueries","toQuery","isParent","mapOperator","groupRules","rules","groupCombinator","combinator","forEach","prefixOperator","replace","trim","data","handleQueryChange","class","selectedOption","options","e","target","isMulti","selectedOptions","newSelection","oldSelection","filter","item","concat","language","style","github","JSON","stringify","onClick","fetch","method","props","tableData","Image","img","Logo","initialState","ToolBar","onTableSelected","setTable","src","logo","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.c2fc19f8.chunk.js","sourcesContent":["import React, {useState, Fragment, useEffect} from 'react';\nimport styled from 'styled-components';\nimport QueryBuilder from 'react-querybuilder';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport {github} from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Select from 'react-select';\n \nconst template = state => ({\n  \"source_table\": {\n    \"name\": \"test.data_test\",\n    \"id_column\": \"GENERAL_ID\",\n    \"unique_per_cols\": ['GENERAL_ID', 'ULTIMATE_PARENT_ID'],\n    \"fuzzy_deduplication_distance\": 1,\n    \"output_correctness_table\": \"test.data_test_correctness\",\n    \"output_completeness_table\": \"test.data_test_completeness\",\n    \"output_comparison_table\": \"test.data_test_comparison\"\n  },\n  \"correctness_validations\": [...state.correctness_validations],\n  \"completeness_validations\": [...state.completeness_validations],\n  \"parent_children_constraints\": [...state.parent_children_constraints],\n  \"compare_related_tables_list\": [\"test.diff_df\", \"test.diff_df_2\"]\n});\n\nconst fields = [\n  { name: 'gridId', label: 'Company Gridid' },\n  { name: 'name', label: 'Company name' },\n  { name: 'isClient', label: 'Is company a client ?', value: false }\n];\n\nconst getInputType = (field, operator) => {\n  switch (field) {\n    case 'age':\n      return 'number';\n    default:\n      return 'text';\n  }\n};\n\nconst Button = styled.button`\n  height: 30px;\n  background: #1890ff;\n  border-radius: 4px;\n  border: none;\n  color: white;\n  line-height: 1.5;\n  font-weight: bold;\n  cursor: pointer;\n  width: 200px;\n  margin: 30px;\n`;\n \nconst Wrapper = styled.div`\n  height: 70vh;\n  border: 1px solid lightgray;\n  border-radius: 8px;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n`;\n\nconst Editor = styled.div`\n  padding: 0px 30px 50px 30px;\n  color: darkblue;\n  text-align: left;\n  overflow: auto;\n  h4 {\n    padding: 0px;\n    margin: 0px;\n    color: #505050;\n    font-weight: normal;\n    margin-bottom: 5px;\n  }\n\n  .completness {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-gap: 8px;\n  }\n\n  .ruleGroup {\n    padding: 0.5rem;\n    border: 1px solid #1890ff;\n    border-radius: 4px;\n    background: rgba(180, 220, 255, 0.2);\n\n    .rule,\n    .ruleGroup {\n      margin-top: 0.5rem;\n      margin-left: 0.5rem;\n    }\n\n    .ruleGroup-combinators.betweenRules {\n      margin-top: 0.5rem;\n    }\n\n    .ruleGroup-notToggle {\n      margin-right: 0.5rem;\n    }\n  }\n`;\n\nconst Output = styled.div`\n  color: darkblue;\n  background: rgb(248, 248, 248);\n  border-radius: 0px 8px 8px 0px;\n  text-align: left;\n  padding: 0px 30px;\n  font-size: 0.8em;\n  overflow: auto;\n`;\n\nconst getColumnBuilderProps = ({ name, type }) => ({\n  operators: [\n    { name: \"Is NULL\", label: \"Is NULL\" },\n    { name: \"Is NOT NULL\", label: \"Is NOT NULL\" },\n    { name: \"= ''\", label: \"Is EMPTY\" },\n    { name: \"!= ''\", label: \"Is NOT EMPTY\" },\n    { name: \"In\", label: \"In\" },\n    { name: \"=\", label: \"=\" },\n    { name: \"!=\", label: \"!=\" },\n    { name: \"<\", label: \"<\" },\n    { name: \">\", label: \">\" },\n    { name: \"<=\", label: \"<=\" },\n    { name: \">=\", label: \">=\" }\n  ],\n  fields: [\n    { name: name, label: name },\n    { name: `CHAR_LENGTH(${name})`, label: `CHAR_LENGTH(${name})` }\n  ],\n  getControlElements: () => ({\n    // This part handles the rendering of input components based on the operator/column DOCTYPE\n    // atm the plain Input text element doesnt work somehow the value is a react synthetic event\n    // which I am not familiar with yet :p\n    valueEditor: specs => {\n      const { field, operator, handleOnChange, value } = specs;\n      const operatorName = operator.toLowerCase();\n      if (\n        operatorName.startsWith(\"is\") ||\n        [\"= ''\", \"!= ''\"].includes(operatorName)\n      ) {\n        return \"\";\n      }\n      if (type === \"number\" || field === `CHAR_LENGTH(${name})`) {\n        return <input value={value} onChange={handleOnChange} />;\n      }\n      return <input onChange={handleOnChange} />;\n    }\n  })\n});\n\nconst toQuery = (input, isParent) => {\n  let query = \"\";\n  const mapOperator = {\n    \"null\": \"IS NULL\",\n    \"notNull\": \"IS NOT NULL\"\n  }\n  const { rules: groupRules, combinator: groupCombinator } = input;\n\n  groupRules.forEach(specs => {\n    const { field = \"\", operator = \"\", value, rules = [] } = specs;\n\n    const prefixOperator = isParent && query === \"\" ? \"\" : groupCombinator;\n    query += rules.length\n      ? toQuery(specs)\n      : ` ${prefixOperator} ${field} ${mapOperator[operator] || operator} ${value} `;\n  });\n\n  return query;\n};\n\nconst handleQueryChange = (targetColumn, input, currentQueries, setQuery) => {\n  const rule = toQuery(input, true).replace(/\\s\\s+/g, ' ').trim();\n  const newQueries = currentQueries.map(data => {\n    if (data.column === targetColumn) {\n      return { column: data.column, rule };\n    }\n    return data;\n  });\n  setQuery(newQueries);\n};\n\nconst RoleEditor = ({table = {columns: []}}) => {\n  const [queries, setQuery] = useState([]);\n  const [parentOf, setParentOf] = useState([]);\n\n  const [completnessOperator, setCompletnessOperator] = useState('');\n  const [completnessValue, setCompletnessValue] = useState('');\n\n  useEffect(() => {\n    setQuery(table.columns.map(({ name }) => ({ column: name, rule: \"\" })));\n  }, [table]);\n\n  const columnMap = table.columns.reduce((map, obj) => {\n    map[obj.name] = obj.type;\n    return map;\n  }, {});\n  \n  const getInputType = (field, operator) => columnMap['field'] || 'text';\n\n  const body = template(\n    {\n      correctness_validations: queries,\n      completeness_validations: [ {\n          \"column\": \"OVER_ALL_COUNT\",\n          \"rule\": \"OVER_ALL_COUNT \" + completnessOperator + \" \" + completnessValue\n        }\n      ],\n      parent_children_constraints: parentOf,\n    }\n  );\n\n  return (\n    <Fragment>\n      {table.columns.length == 0 && <h3> Please select table to add rules</h3>}\n      {table.columns.length != 0 && \n        <Wrapper>\n          <Editor>\n            <h1>Editor</h1>\n            <h3>Correctness validations</h3>\n            {\n              table.columns.map(specs => (\n                <div key={specs.name}>\n                  <h4>{specs.name}: [{specs.type}]</h4>\n                  <QueryBuilder \n                    fields={getColumnBuilderProps(specs).fields} \n                    getInputType={getInputType}\n                    onQueryChange={query => handleQueryChange(specs.name, query, queries, setQuery)}\n                    />\n                    <br/>\n                </div>\n              ))\n            }\n            <h3>completeness validations</h3>\n            <h4>Number of rows</h4>\n            <div class=\"completness\">\n              <Select\n                onChange={ selectedOption => setCompletnessOperator(selectedOption.value)}\n                options={[\n                  { value: '>', label: '>' },\n                  { value: '>=', label: '>=' },\n                  { value: '=', label: '=' },\n                  { value: '<', label: '<' },\n                  { value: '<=', label: '<=' },\n                ]}\n              />\n              <input type='number' onChange={e => setCompletnessValue(e.target.value)}></input>\n            </div>\n            <h3>Parent of constraints</h3>\n            {\n              table.columns.map(specs => (\n                <div key={specs.name}>\n                  <h4>{specs.name}: [{specs.type}]</h4>\n                  <Select\n                    isMulti\n                    onChange={selectedOptions => {\n                      const newSelection = (selectedOptions || []).map(selectedOption => (\n                        {\n                          \"column\": specs.name,\n                          \"parent\": selectedOption.value\n                        }\n                      ));\n                      const oldSelection = parentOf.filter(item => item.column != specs.name);\n                      setParentOf(newSelection.concat(oldSelection));\n                    }}\n                    options={table.columns.filter(item => item.name != specs.name).map(item => ({\n                      value: item.name,\n                      label: item.name,\n                    }))}\n                  /><br/>\n                </div>\n              ))\n            }\n          </Editor>\n          <Output>\n            <h1>Output</h1>\n            <SyntaxHighlighter language=\"JSON\" style={github}>\n              {JSON.stringify(body, null, 2)}\n            </SyntaxHighlighter>\n          </Output>\n        </Wrapper>\n      }\n      {table.columns.length != 0 && <Button onClick={() => fetch('/api/validate', {body: JSON.stringify(body, null, 2), method: 'POST'})}>Submit</Button>}\n    </Fragment>\n  );\n};\n\nexport default RoleEditor;","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport logo from '../../assets/logo.png';\n\nconst Wrapper = styled.div`\n  height: 60px;\n  border-radius: 8px;\n  border: 1px solid lightgrey;\n  display: grid;\n  justify-items: center;\n  align-items: center;\n  grid-template-columns: repeat(3, 1fr);\n  margin-bottom: 40px;\n`;\n\nconst Button = styled.button`\n  height: 30px;\n  width: 100px;\n  background: ${props => props.type === 'secondary' ? 'white': '#1890ff'};\n  color: ${props => props.type === 'secondary' ?'#1890ff' : 'white'};\n  border-radius: 4px;\n  border: 1px solid #1890ff;\n  line-height: 1.5;\n  font-weight: bold;\n  cursor: pointer;\n`;\n\nconst tableData = {\n  name: \"domino_grid.csv\",\n  columns: \n  [\n    {\n      \"name\": \"gridId\",\n      \"type\": \"number\",\n    },\n    {\n      \"name\": \"name\",\n      \"type\": \"string\",\n    },\n    {\n      \"name\": \"isClient\",\n      \"type\": \"bool\",\n    },\n  ]\n}\n\nconst Image = styled.img`\n  width: 60px;\n`;\n\nconst Logo = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  justify-items: center;\n  align-items: center;\n  font-weight: bold;\n  color: darkblue;\n`;\n\nconst initialState = {columns: []};\nconst ToolBar = ({onTableSelected}) => {\n  const [table, setTable] = useState({...initialState});\n  return (\n    <Wrapper>\n      <Button onClick={() => {setTable(tableData); onTableSelected(tableData)}}>Upload</Button>\n      <span>\n        <b>\n          {table.name || 'No table selected'}\n        </b>\n      </span>\n      <Logo>Validata <Image src={logo}/></Logo>\n    </Wrapper>\n  );\n};\n\nexport default ToolBar;","import React, {useState} from 'react';\nimport './App.css';\nimport RoleEditor from './components/RoleEditor';\nimport ToolBar from './components/ToolBar';\n\nfunction App() {\n  const [table, setTable] = useState({columns: []});\n  return (\n    <div className=\"App\">\n      <ToolBar onTableSelected={table => setTable(table)}/>\n      <RoleEditor table={table}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.50e8e5ec.png\";"],"sourceRoot":""}